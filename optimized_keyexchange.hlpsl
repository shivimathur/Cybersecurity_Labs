%%% Key exchange protocol, secured for secrecy, mutual authentication of A and B (optimized)
%%% 1. A -> T : {B,Kab}_Kat
%%% 2. T -> B : {A,Kab}_Kbt
%%% 3. B -> A : {B,Nb}_Kab
%%% 4. A -> B : {Nb}_Kab

role role_A(A:agent,B:agent,T:agent,Kat:symmetric_key,SND,RCV:channel(dy))
played_by A
def=
	local
		State:nat,
                Na,Nb:text,
                Kab:symmetric_key
	init
		State := 0
	transition
		1. State=0 /\ RCV(start) =|> 
                   State':=1 /\ Na':=new() /\ Kab':=new() /\ SND({B.Kab'}_Kat) /\ secret(Kab',sec_1,{A,B,T})

		2. State=1 /\ RCV({B.Nb'}_Kab) =|> State':=2  /\ SND({Nb'}_Kab) 
                   
                   %% A checks that B uses the same key
                   %% that he sent at step 1.
                   /\ request(A,B,auth_1,Kab)

                   %% A hopes that Nb will permit to authenticate him
                   /\ witness(A,B,auth_2,Nb')
end role

role role_T(T:agent,A:agent,B:agent,Kat,Kbt:symmetric_key,SND,RCV:channel(dy))
played_by T
def=
	local
		State:nat,Na:text,Kab:symmetric_key
	init
		State := 0
	transition
		1. State=0 /\ RCV({B.Kab'}_Kat) =|> 
                   
                   State':=1 /\ SND({A.Kab'}_Kbt) 
end role


role role_B(B:agent,A:agent,T:agent,Kbt:symmetric_key,SND,RCV:channel(dy))
played_by B
def=
	local
		State:nat,Na,Nb:text,Kab:symmetric_key
	init
		State := 0
	transition
		1. State=0 /\ RCV({A.Kab'}_Kbt) =|> 
                   
                   State':=1 /\ Nb':= new() /\ SND({B.Nb'}_Kab')

                   %% B hopes that Kab will permit to authenticate him
                   /\ witness(B,A,auth_1,Kab')

                2. State=1 /\ RCV({Nb}_Kab) =|> State':=2 

                %% B checks that he receives the same nonce 
                %% that he sent at step 1.

                /\ request(B,A,auth_2,Nb)
end role



role session(A:agent,B:agent,T:agent,Kat,Kbt:symmetric_key)
def=
	local
		SND3,RCV3,SND2,RCV2,SND1,RCV1:channel(dy)
	composition
                role_A(A,B,T,Kat,SND1,RCV1) /\
		role_B(B,A,T,Kbt,SND2,RCV2) /\ 
                role_T(T,A,B,Kat,Kbt,SND3,RCV3) 
end role

role environment()
def=
	const
		kat,kbt,kit:symmetric_key,      %% we add a symmetric key: kit shared between the intruder and T
                alice,bob,trusted:agent,        
                sec_1,auth_1,auth_2:protocol_id
	intruder_knowledge = {alice,bob,kit}    %% ... and we give it to the intruder
	composition
                      %% We run the regular session
		session(alice,bob,trusted,kat,kbt) 
                      %% in parallel with another regular session
                  /\ session(alice,bob,trusted,kat,kbt) 

                      %% and a session between the intruder (with key kit) and bob
                  /\ session(i,bob,trusted,kit,kbt) 
                      %% and a session between alice and the intruder (with key kit)
                  /\ session(alice,i,trusted,kat,kit) 
end role

goal
	secrecy_of sec_1
        authentication_on auth_1
        authentication_on auth_2
end goal

environment()

